import sys
import torch
from PIL import Image
from torchvision import transforms, models
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QVBoxLayout
from PyQt5.QtGui import QPixmap, QPainter, QPen, QFont
from PyQt5.QtCore import Qt

# Your paths and parameters
model_path = "fasterrcnn_resnet50.pth"
test_image = "path/to/test_image.jpg"
num_classes = 3  # background + your classes
label_map = {0: "background", 1: "cat", 2: "dog"}  # Example labels

# Load model architecture and weights
model = models.detection.fasterrcnn_resnet50_fpn(pretrained=False)
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)
model.load_state_dict(torch.load(model_path, map_location="cpu"))
model.eval()

# Load image and run inference
img = Image.open(test_image).convert("RGB")
img_tensor = transforms.ToTensor()(img)
with torch.no_grad():
    preds = model([img_tensor])[0]

boxes = preds['boxes']
labels = preds['labels']
scores = preds['scores']

# Convert PIL image to QPixmap
qimage = img.toqpixmap() if hasattr(img, 'toqpixmap') else None
if qimage is None:
    # Manually convert PIL image to QPixmap if PIL doesn't have toqpixmap()
    from io import BytesIO
    buffer = BytesIO()
    img.save(buffer, format="PNG")
    qimage = QPixmap()
    qimage.loadFromData(buffer.getvalue(), "PNG")

# Draw bounding boxes on QPixmap
painter = QPainter(qimage)
pen = QPen(Qt.red)
pen.setWidth(2)
painter.setPen(pen)
painter.setFont(QFont("Arial", 12))

# Threshold to filter out low confidence predictions
score_thresh = 0.5
for box, label, score in zip(boxes, labels, scores):
    if score >= score_thresh:
        xmin, ymin, xmax, ymax = box.tolist()
        width = xmax - xmin
        height = ymax - ymin
        painter.drawRect(xmin, ymin, width, height)
        text = f"{label_map[label.item()]}: {score:.2f}"
        painter.drawText(xmin, ymin - 5, text)

painter.end()

# PyQt5 Application to show the image
app = QApplication(sys.argv)
window = QWidget()
layout = QVBoxLayout(window)

label_widget = QLabel()
label_widget.setPixmap(qimage)
layout.addWidget(label_widget)

window.setWindowTitle("Detection Results")
window.show()
sys.exit(app.exec_())